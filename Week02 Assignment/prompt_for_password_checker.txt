Broblem Statement: I have two text files named “toppassword.txt” and another text file named “wordlist.txt” that are added to this context. The toppassword.txt file contains list of people’s passwords while the wordlist.txt file contains list of words. Using these two files in the context, I want to write a Python program that will get input from user as password and calculate the user input strength based on the following requirements: 
1)If the password is in the wordlist.text file. (this should be a case insensitive match).
1a) The program should Print the message. "'Password is a dictionary word and is not secure." And then return a strength value of 0
2) If the password is in the toppassword.text file. (this should be a case sensitive match)
        2a) The program should print the message "Password is a commonly used password and is not secure." And then return a strength value of 0 also.

3) If the password is shorter than the minimum password length of 10
        3a) The program should print the message "Password is too short and is not secure.” And then return the strength value of 1
4) If the password is longer than 15 characters, the password is strong     
4a) The program should Print the message "Password is long, length trumps complexity this is a good password." And then return the strength value of 5

5) For requirement number 5, the password strength will be determined by the complexity of the password. The complexity of the password should have a score, and the complexity score of the password should be a number from 1 to 4 that indicates how many of the different types of characters like upper case later, lower case later, numeric digits and special symbols are used in the password. E.g. if the password only has upper or lower case letters or number digits, it would have a complexity score of 1. If the password only has upper and lower case letters, it would have a complexity score of 2. If the password has both upper case letter, lower case latter, and number digit only, it should have a complexity score of 3. If the password has both upper case letter, lower case latter, number digit and special character, then it should have a complexity score of 4.
          5a) The strength score will be calculated as a base score of 1 plus the complexity score.
           5b) Return the strength score.

Request: 
Write a Python Program that will solve the problem statement. In your program, follow these rules.
1)	Create a function named “word_in_file” that will accept “word,  file name, case_sensitive” as parameters and then return Boolean as return type. This function (word_in_name) will read a file (specified by the filename parameter) in which each line of the file contains a single word. If the word passed in the word parameter matches a word in the file the function returns a true otherwise it returns a false. If the parameter case_sensitive is true a case sensitive match is performed. If case_sensitive is false a case insensitive match is performed. The case_sensitive parameter should default to False
2)	Create a function named “word_has_character” that will accept “word,  character_list”, as parameters and then return Boolean as return type. This function (word_has_character) will loop through each character in the string passed in the word parameter to see if that character is in the list of characters passed in the character_list parameter. If any of the characters in the word are present in the character list, return a true, If none of the characters in the word are in the character list return false
3)	Create a function named “word_complexity” that will accept “word” as parameters and then return Integer as return type. This function creates a numeric complexity value based on the types of characters the word parameter contains. One point of complexity is given for each type of character in the word. The function calls the word_has_character function for each of the 4 kinds of characters (LOWER, UPPER, DIGITS, SPECIAL). If the word has that kind of character a point is added to complexity rating. Since there are 4 kinds of characters the complexity rating will range from 0 to 4. (0 would be returned only if word contained no characters or only contains characters that are not in any of the lists.)
4)	Create a function named “password_strength” that will accept “password, min_length,
strong_length” as parameters and then return Integer as return type. This function checks length requirements, calls word_complexity to calculate the words complexity then determines the password's strength based on the user requirements. It should print the messages defined in the requirements and return the password's strength as a number from 0 to 5. The min_length parameter should have a default value of 10. The strong_length parameter should have a default value of 16.
5)	Create a function and name it “exceed_requirement”. Inside the exceed requirement function, write some codes that will add one more feature that will exceedd the requirement listed in the program.
6)	Create a function named “main” without any parameter and return type. This function Provides the user input loop. The loop asks the user for a password to test. If that password is anything but "q" or "Q" call the password_strength function and report the results to the user. If the user enters "q" or "Q", quit the program.
Context: 
•	You may use the following definitions for the lists of character types
LOWER=["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"] UPPER=["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"] DIGITS=["0","1","2","3","4","5","6","7","8","9"] SPECIAL=["!", "@", "#", "$", "%", "^", "&", "*", "(", ")", "-", "_", "=", "+", "[", "]", "{", "}", "|", ";", ":", """, """, ",", ".", "<", ">", "?", "/", "`", "~"]
•	When you read a line from the file, use the strip() function of the string to remove the newline character from the end of the string. If you don't your word comparisons will not return the expected result.
•	When you open the password and dictionary files make sure you include the encoding parameter and pass it the value utf-8. This will ensure python knows how to read the file properly.
Expected Result: a working password strength checker that will allow users check the strength of their password and get feedback based on the result.
